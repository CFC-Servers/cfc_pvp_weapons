CFC_Parachute = CFC_Parachute or {}

CFC_Parachute.DesignMaterials = false
CFC_Parachute.DesignMaterialNames = false
CFC_Parachute.DesignMaterialCount = false
CFC_Parachute.DesignWindow = false

CFC_Parachute.MenuToggleButtons = CFC_Parachute.MenuToggleButtons or {}
--[[ Contains tables with the following syntax to represent toggle buttons which will get added to the top of the design menu:
{
    HideState = BOOLEAN, -- Will hide the "Enabled/Disabled" text appended to the bottom of the tooltip
    TextOff = STRING, -- Text displayed when the button's value is 'off'
    TextOn = STRING, -- Text displayed when the button's value is 'on'
    ConVar = STRING, -- ConVar to be toggled (optional if OnClick and IsOn are defined)
    ConVarOff = STRING, -- Off value of ConVar (optional, default "0")
    ConVarOn = STRING, -- On value of ConVar (optional, default "1")
    ConVarServerChoice = STRING, -- Value which tells the client to use whatever value is used by the server in a convar of the same name with _sv appended (optional, does not exist by default)
    HoverText = STRING, -- Info text to display when the button is hovered over (optional, uses ConVar help text by default if ConVar is defined)
    OnClick = FUNCTION, -- Function to call when the button is pressed, overrides default functionality (optional)
    IsOn = FUNCTION, -- Returns true/false for if the button is on/off (optional if ConVar is defined)
    DButton = DBUTTON -- Autogenerated DButton object, used internally
}
--]]

CreateClientConVar( "cfc_parachute_space_equip", 2, true, true, "Press spacebar while falling to quickly equip a parachute.", 0, 2 )
CreateClientConVar( "cfc_parachute_space_equip_double", 2, true, true, "Double tap spacebar to equip parachutes, instead of a single press.", 0, 2 )
CreateClientConVar( "cfc_parachute_space_equip_weapon", 2, true, true, "Automatically switch back to your previous weapon when space-equipping a parachute.", 0, 2 )

CreateClientConVar( "cfc_parachute_quick_close", 2, true, true, "Press walk and crouch to quickly close your parachute at any time.", 0, 1 )
CreateClientConVar( "cfc_parachute_prev_weapon_on_close", 2, true, true, "Auto-select your previous weapon when you close your parachute.", 0, 1 )

local DESIGN_MATERIALS
local DESIGN_MATERIAL_NAMES
local DESIGN_MATERIAL_COUNT

local DESIGN_CHOICE = CreateConVar( "cfc_parachute_design", 1, { FCVAR_ARCHIVE, FCVAR_USERINFO, FCVAR_SERVER_CAN_EXECUTE, FCVAR_NEVER_AS_STRING }, "Your selected parachute design.", 1, 50000 )
local SPACE_EQUIP_VOLUME = CreateClientConVar( "cfc_parachute_space_equip_volume", 0.5, true, false, "Volume for the sound that indicates you are ready to space-equip a parachute.", 0, 1 )

local MENU_COLOR = Color( 36, 41, 67, 255 )
local MENU_BAR_COLOR = Color( 42, 47, 74, 255 )

local BUTTON_TEXT_COLOR = Color( 255, 255, 255, 255 )
local BUTTON_TEXT_HOVERED_COLOR = Color( 255, 255, 255, 255 )
local BUTTON_OUTLINE_COLOR = Color( 255, 255, 255, 255 )
local BUTTON_PRESSED_COLOR = Color( 83, 227, 251, 255 )
local BUTTON_HOVERED_COLOR = Color( 28, 34, 56, 255 )
local BUTTON_OFF_COLOR = Color( 24, 28, 48, 255 )
local BUTTON_COLOR = Color( 42, 47, 74, 255 )

local TOOLTIP_COLOR = Color( 24, 29, 59, 255 )
local TOOLTIP_OUTLINE_COLOR = Color( 50, 58, 75, 255 )

local ANG_ZERO = Angle( 0, 0, 0 )
local ANG_GRAB_RIGHT_UPPERARM = Angle( 127.3, 331.3, 368.5 )
local ANG_GRAB_RIGHT_FOREARM = Angle( -6.8, 41.4, 57.5 )
local ANG_GRAB_RIGHT_HAND = Angle( 0, 26.7, 25.4 )
local ANG_GRAB_LEFT_UPPERARM = Angle( -72.1, -166, 127.3 )
local ANG_GRAB_LEFT_FOREARM = Angle( -11, 7.2, 26.5 )
local ANG_GRAB_LEFT_HAND = Angle( 0, 8.7, 0 )


table.insert( CFC_Parachute.MenuToggleButtons, {
    HideState = true,
    TextOff = "Help/Info",
    TextOn = "Help/Info",
    HoverText = "Parachutes slow your descent and improve your aerial mobility." .. "\n\n" ..
        "Your chute will start off closed, and can be toggled open with left click." .. "\n" ..
        "Right clicking will bring up this config menu." .. "\n" ..
        "You can select various chute designs and config options with the buttons below." .. "\n\n" ..
        "With your parachute open, you can switch to a different weapon and shoot from the air." .. "\n" ..
        "Be careful though, while your hands are occupied, you will lose a lot of horizontal control." .. "\n" ..
        "Shooting too much will send you careening in a different direction, or even towards the ground."
} )

table.insert( CFC_Parachute.MenuToggleButtons, {
    TextOff = "Space-Equip (Disabled)",
    TextOn = "Space-Equip (Enabled)",
    ConVar = "cfc_parachute_space_equip",
    ConVarServerChoice = "2",
    HoverText = "Press spacebar while falling to quickly equip and open a parachute." .. "\n" ..
        "A small 'whoosh' sound will play when this is ready." .. "\n\n" ..
        "If you already have a parachute, this doubles as a shortcut to open it at any time."
} )

table.insert( CFC_Parachute.MenuToggleButtons, {
    TextOff = "Double Tap for Space-Equip (Disabled)",
    TextOn = "Double Tap for Space-Equip (Enabled)",
    ConVar = "cfc_parachute_space_equip_double",
    ConVarServerChoice = "2"
} )

table.insert( CFC_Parachute.MenuToggleButtons, {
    TextOff = "Keep Wep on Space-Equip (Disabled)",
    TextOn = "Keep Wep on Space-Equip (Enabled)",
    ConVar = "cfc_parachute_space_equip_weapon",
    ConVarServerChoice = "2"
} )

table.insert( CFC_Parachute.MenuToggleButtons, {
    TextOff = "Prev Wep on Close (Disabled)",
    TextOn = "Prev Wep on Close (Enabled)",
    ConVar = "cfc_parachute_prev_weapon_on_close",
    ConVarServerChoice = "2"
} )

table.insert( CFC_Parachute.MenuToggleButtons, {
    TextOff = "Quick Close (Disabled)",
    TextOn = "Quick Close (Enabled)",
    ConVar = "cfc_parachute_quick_close",
    ConVarServerChoice = "2",
    HoverText = "Press walk and crouch to quickly close your parachute at any time." .. "\n" ..
        "(alt and ctrl by default)"
} )


local function updateMenuButton( button )
    if not button then return end

    button:SetText( button.cfcParachuteIntendedText() )

    local tooltip = button.cfcParachuteTooltip
    if not tooltip then return end

    tooltip:SetText( button.cfcParachuteIntendedHoverText() )
end


function CFC_Parachute.CreateDesignPreview( x, y, ind, panel )
    local icon = vgui.Create( "ContentIcon", panel )
    icon:SetPos( x, y )
    icon:SetName( DESIGN_MATERIAL_NAMES[ind] )
    icon:SetMaterial( DESIGN_MATERIALS[ind] )

    icon.designInd = ind

    icon.DoClick = function()
        LocalPlayer():ConCommand( "cfc_parachute_design " .. ind )
    end

    local _Paint = icon.Paint
    icon.Paint = function( _, w, h )
        render.SuppressEngineLighting( true )
        _Paint( icon, w, h )
        render.SuppressEngineLighting( false )
    end

    return icon
end

function CFC_Parachute.PaintButton( panel ) -- Mimics appearance from CFC Loadouts for consistency
    panel:SetTextColor( BUTTON_TEXT_COLOR )

    panel.Paint = function( self, w, h )
        draw.RoundedBox( 0, 0, 0, w, h, BUTTON_OUTLINE_COLOR )

        if self:IsDown() then
            draw.RoundedBox( 0, 1, 1, w - 2, h - 2, BUTTON_PRESSED_COLOR )
        elseif self:IsHovered() then
            draw.RoundedBox( 0, 1, 1, w - 2, h - 2, BUTTON_HOVERED_COLOR )
        elseif panel.cfcParachuteIsOn and not panel.cfcParachuteIsOn() then
            draw.RoundedBox( 0, 1, 1, w - 2, h - 2, BUTTON_OFF_COLOR )
        else
            draw.RoundedBox( 0, 1, 1, w - 2, h - 2, BUTTON_COLOR )
        end
    end
end

function CFC_Parachute.PaintButtonHover( panel )
    panel:SetTextColor( BUTTON_TEXT_HOVERED_COLOR )

    panel.Paint = function( _, w, h )
        draw.RoundedBox( 0, 0, 0, w, h, TOOLTIP_OUTLINE_COLOR )
        draw.RoundedBox( 0, 1, 1, w - 2, h - 2, TOOLTIP_COLOR )
    end
end

function CFC_Parachute.CreateTooltip( panel, button )
    button:SetMouseInputEnabled( true )

    local tooltip = vgui.Create( "DLabel", panel )
    local tX, tY = panel:LocalCursorPos()
    local hoverText = button.cfcParachuteIntendedHoverText()
    local hoverState = button:IsHovered()
    local clamp = math.Clamp

    tooltip:SetText( hoverText )
    tooltip:SetPos( tX, tY )

    local pW, pH = panel:GetSize()
    local tW, tH = tooltip:GetTextSize()
    local textMargin = 10
    local panelMargin = 5
    local cursorOffsetX = -20
    local cursorOffsetY = 25

    tooltip:SetSize( tW + textMargin, tH + textMargin )
    tooltip:SetTextInset( textMargin / 2, 0 )
    CFC_Parachute.PaintButtonHover( tooltip )
    button.cfcParachuteTooltip = tooltip

    local xMax = pW - ( tW + textMargin + panelMargin )
    local yMax = pH - ( tH + textMargin + panelMargin )

    function button:Think()
        local isHovered = button:IsHovered()

        if isHovered then
            local x, y = panel:LocalCursorPos()

            x = clamp( x + cursorOffsetX, panelMargin, xMax )
            y = clamp( y + cursorOffsetY, panelMargin, yMax )

            tooltip:SetPos( x, y )
        end

        if hoverState ~= isHovered then
            hoverState = isHovered

            if hoverState then
                tooltip:MoveToFront()
                tooltip:Show()
            else
                tooltip:Hide()
            end
        end
    end
end

function CFC_Parachute.CreateToggleButton( x, y, ind, panel, w, h )
    local button = vgui.Create( "DButton", panel )
    local buttonData = CFC_Parachute.MenuToggleButtons[ind]

    local convarName = buttonData.ConVar
    local convar = convarName and GetConVar( convarName )
    local offVal = buttonData.ConVarOff or "0"
    local onVal = buttonData.ConVarOn or "1"
    local svVal = buttonData.ConVarServerChoice
    local offText = buttonData.TextOff or "Enable [UNDEFINED]"
    local onText = buttonData.TextOn or "Disable [UNDEFINED]"
    local hoverText = buttonData.HoverText or ( convar and convar:GetHelpText() )
    local hideState = buttonData.HideState

    button.cfcParachuteIsOn = buttonData.IsOn or function()
        if not convar then return true end

        local curVal = convar:GetString()

        return curVal == onVal or ( curVal == svVal and GetConVar( convarName .. "_sv" ):GetString() == onVal )
    end

    button.cfcParachuteIntendedText = function()
        return button.cfcParachuteIsOn() and onText or offText
    end

    button.cfcParachuteIntendedHoverText = function()
        if hideState then return hoverText end

        local text = hoverText .. "\n\n" .. "Currently "

        return text .. ( button.cfcParachuteIsOn() and "enabled" or "disabled" )
    end

    button:SetText( button.cfcParachuteIntendedText() )
    button:SetPos( x, y )
    button:SetSize( w or 200, h or 20 )
    CFC_Parachute.PaintButton( button )

    button.DoClick = buttonData.OnClick or function()
        if not convarName then return end

        local newVal = button.cfcParachuteIsOn() and offVal or onVal

        LocalPlayer():ConCommand( convarName .. " " .. newVal )
    end

    if hoverText then
        CFC_Parachute.CreateTooltip( panel, button )
    end

    buttonData.DButton = button

    return button
end

function CFC_Parachute.OpenDesignMenu()
    local window = CFC_Parachute.DesignWindow

    if window then
        window:Show()
        window:MakePopup()

        for _, data in ipairs( CFC_Parachute.MenuToggleButtons ) do
            local convarName = data.ConVar
            local serverChoice = data.ConVarServerChoice

            if convarName and serverChoice and GetConVar( convarName ):GetString() == serverChoice then
                updateMenuButton( data.DButton )
            end
        end

        return
    end

    local windowWidth = 800
    local windowHeight = 600
    local menuBarHeight = 25

    window = vgui.Create( "DFrame" )
    window:SetSize( windowWidth, windowHeight )
    window:Center()
    window:SetTitle( "CFC Parachute Config" )
    window:SetDeleteOnClose( false )
    window:MakePopup()
    window:SetDeleteOnClose()

    CFC_Parachute.DesignWindow = window

    scrollPanel = vgui.Create( "DScrollPanel", window )
    scrollPanel:SetPos( 0, menuBarHeight )
    scrollPanel:SetSize( windowWidth, windowHeight - menuBarHeight )

    window.Paint = function( _, w, h )
        draw.RoundedBox( 8, 0, 0, w, h, MENU_COLOR )
        draw.RoundedBox( 8, 0, 0, w, menuBarHeight, MENU_BAR_COLOR )
    end

    -- Toggle button setup
    local x = 0
    local y = 0
    local offsetX = 5
    local offsetY = 10
    local buttonWidth = 190
    local buttonHeight = 20
    local buttonGapX = 5
    local buttonGapY = 5

    for i = 1, #CFC_Parachute.MenuToggleButtons do
        if ( x + 1 ) * ( buttonWidth + buttonGapX ) > windowWidth then
            x = 0
            y = y + 1
        end

        CFC_Parachute.CreateToggleButton(
            x * ( buttonWidth + buttonGapX ) + offsetX,
            y * ( buttonHeight + buttonGapY ) + offsetY,
            i, scrollPanel, buttonWidth, buttonHeight
        )

        x = x + 1
    end

    -- Design button setup
    offsetX = 0

    if x > 0 then
        y = y + 1

        offsetY = offsetY + y * ( buttonHeight + buttonGapY )
    end

    x = 0
    y = 0
    buttonWidth = 120
    buttonHeight = 120

    for i = 1, CFC_Parachute.DesignMaterialCount do
        if ( x + 1 ) * buttonWidth >= windowWidth then
            x = 0
            y = y + 1
        end

        CFC_Parachute.CreateDesignPreview(
            x * ( buttonWidth + buttonGapX ) + offsetX,
            y * ( buttonHeight + buttonGapY ) + offsetY,
            i, scrollPanel
        )

        x = x + 1
    end
end


cvars.AddChangeCallback( "cfc_parachute_design", function( _, old, new )
    net.Start( "CFC_Parachute_SelectDesign" )
    net.WriteInt( math.floor( old ), 17 )
    net.WriteInt( math.floor( new ), 17 )
    net.SendToServer()
end )


hook.Add( "InitPostEntity", "CFC_Parachute_FinalMenuPrep", function()
    hook.Run( "CFC_Parachute_CheckOptionalDependencies" )

    for _, data in ipairs( CFC_Parachute.MenuToggleButtons ) do
        local convarName = data.ConVar

        if convarName then
            cvars.AddChangeCallback( convarName, function()
                updateMenuButton( data.DButton )
            end )
        end
    end
end )


net.Receive( "CFC_Parachute_DefineChuteDir", function()
    local chute = net.ReadEntity()
    local chuteDirRel = net.ReadVector()

    if not chute.SetChuteDirection then return end -- Somehow the function sometimes becomes nil while the parachute is still valid

    chute:SetChuteDirection( chuteDirRel )
end )

net.Receive( "CFC_Parachute_DefineDesigns", function()
    DESIGN_MATERIALS = net.ReadTable()
    DESIGN_MATERIAL_NAMES = net.ReadTable()
    DESIGN_MATERIAL_COUNT = net.ReadInt( 17 )

    CFC_Parachute.DesignMaterials = DESIGN_MATERIALS
    CFC_Parachute.DesignMaterialNames = DESIGN_MATERIAL_NAMES
    CFC_Parachute.DesignMaterialCount = DESIGN_MATERIAL_COUNT
end )

net.Receive( "CFC_Parachute_SelectDesign", function()
    net.Start( "CFC_Parachute_SelectDesign" )
    net.WriteInt( 1, 17 )
    net.WriteInt( DESIGN_CHOICE:GetInt(), 17 )
    net.SendToServer()
end )

net.Receive( "CFC_Parachute_GrabChuteStraps", function()
    local ply = net.ReadEntity()
    local state = net.ReadBool()

    if not IsValid( ply ) then return end

    ply:SetIK( not state )

    if state then
        ply:AnimRestartGesture( GESTURE_SLOT_CUSTOM, ACT_GMOD_NOCLIP_LAYER, false )
        ply:AnimRestartGesture( GESTURE_SLOT_JUMP, ACT_HL2MP_IDLE_PASSIVE, false )
    else
        ply:AnimResetGestureSlot( GESTURE_SLOT_CUSTOM )
        ply:AnimResetGestureSlot( GESTURE_SLOT_JUMP )
    end

    local rightUpperarm = ply:LookupBone( "ValveBiped.Bip01_R_Upperarm" )
    local rightForearm = ply:LookupBone( "ValveBiped.Bip01_R_Forearm" )
    local rightHand = ply:LookupBone( "ValveBiped.Bip01_R_Hand" )
    local leftUpperarm = ply:LookupBone( "ValveBiped.Bip01_L_Upperarm" )
    local leftForearm = ply:LookupBone( "ValveBiped.Bip01_L_Forearm" )
    local leftHand = ply:LookupBone( "ValveBiped.Bip01_L_Hand" )

    if not rightUpperarm or not rightForearm or not rightHand or not leftUpperarm or not leftForearm or not leftHand then return end

    if state then
        ply:ManipulateBoneAngles( rightUpperarm, ANG_GRAB_RIGHT_UPPERARM )
        ply:ManipulateBoneAngles( rightForearm, ANG_GRAB_RIGHT_FOREARM )
        ply:ManipulateBoneAngles( rightHand, ANG_GRAB_RIGHT_HAND )
        ply:ManipulateBoneAngles( leftUpperarm, ANG_GRAB_LEFT_UPPERARM )
        ply:ManipulateBoneAngles( leftForearm, ANG_GRAB_LEFT_FOREARM )
        ply:ManipulateBoneAngles( leftHand, ANG_GRAB_LEFT_HAND )
    else
        ply:ManipulateBoneAngles( rightUpperarm, ANG_ZERO )
        ply:ManipulateBoneAngles( rightForearm, ANG_ZERO )
        ply:ManipulateBoneAngles( rightHand, ANG_ZERO )
        ply:ManipulateBoneAngles( leftUpperarm, ANG_ZERO )
        ply:ManipulateBoneAngles( leftForearm, ANG_ZERO )
        ply:ManipulateBoneAngles( leftHand, ANG_ZERO )
    end
end )

net.Receive( "CFC_Parachute_SpaceEquipReady", function()
    local volume = SPACE_EQUIP_VOLUME:GetFloat()
    if volume <= 0 then return end

    LocalPlayer():EmitSound( "player/suit_sprint.wav", nil, nil, volume )
end )
