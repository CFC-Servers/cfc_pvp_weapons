CFC_Parachute = CFC_Parachute or {}

CFC_Parachute.DesignWindow = false

CFC_Parachute.MenuToggleButtons = CFC_Parachute.MenuToggleButtons or {}
--[[ Contains tables with the following syntax to represent toggle buttons which will get added to the top of the design menu:
{
    HideState = BOOLEAN, -- Will hide the "Enabled/Disabled" text appended to the bottom of the tooltip
    TextOff = STRING, -- Text displayed when the button's value is 'off'
    TextOn = STRING, -- Text displayed when the button's value is 'on'
    ConVar = STRING, -- ConVar to be toggled (optional if OnClick and IsOn are defined)
    ConVarOff = STRING, -- Off value of ConVar (optional, default "0")
    ConVarOn = STRING, -- On value of ConVar (optional, default "1")
    ConVarServerChoice = STRING, -- Value which tells the client to use whatever value is used by the server in a convar of the same name with _sv appended (optional, does not exist by default)
    HoverText = STRING, -- Info text to display when the button is hovered over (optional, uses ConVar help text by default if ConVar is defined)
    OnClick = FUNCTION, -- Function to call when the button is pressed, overrides default functionality (optional)
    IsOn = FUNCTION, -- Returns true/false for if the button is on/off (optional if ConVar is defined)
    DButton = DBUTTON -- Autogenerated DButton object, used internally
}
--]]

CreateClientConVar( "cfc_parachute_space_equip", 2, true, true, "Press spacebar while falling to quickly equip a parachute.", 0, 2 )
CreateClientConVar( "cfc_parachute_space_equip_double", 2, true, true, "Double tap spacebar to equip parachutes, instead of a single press.", 0, 2 )
CreateClientConVar( "cfc_parachute_quick_close_advanced", 2, true, true, "Changes the key combo for closing parachutes from walk to crouch + walk.", 0, 2 )


CreateConVar( "cfc_parachute_design", 1, { FCVAR_ARCHIVE, FCVAR_USERINFO, FCVAR_SERVER_CAN_EXECUTE }, "Your selected parachute design.", 1, 50000 )

local MENU_COLOR = Color( 36, 41, 67, 255 )
local MENU_BAR_COLOR = Color( 42, 47, 74, 255 )

local BUTTON_TEXT_COLOR = Color( 255, 255, 255, 255 )
local BUTTON_TEXT_HOVERED_COLOR = Color( 255, 255, 255, 255 )
local BUTTON_OUTLINE_COLOR = Color( 255, 255, 255, 255 )
local BUTTON_PRESSED_COLOR = Color( 83, 227, 251, 255 )
local BUTTON_HOVERED_COLOR = Color( 28, 34, 56, 255 )
local BUTTON_OFF_COLOR = Color( 24, 28, 48, 255 )
local BUTTON_COLOR = Color( 42, 47, 74, 255 )

local TOOLTIP_COLOR = Color( 24, 29, 59, 255 )
local TOOLTIP_OUTLINE_COLOR = Color( 50, 58, 75, 255 )

local designPreviewMaterialPaths = {}


table.insert( CFC_Parachute.MenuToggleButtons, {
    HideState = true,
    TextOff = "Help/Info",
    TextOn = "Help/Info",
    HoverText = "Parachutes slow your descent and improve your aerial mobility." .. "\n\n" ..
        "While falling, press jump (spacebar) to open a parachute." .. "\n" ..
        "Pressing walk (alt) will close the parachute." .. "\n\n" ..
        "You can select various chute designs and config options with the buttons below."
} )

table.insert( CFC_Parachute.MenuToggleButtons, {
    TextOff = "Space-Equip (Disabled)",
    TextOn = "Space-Equip (Enabled)",
    ConVar = "cfc_parachute_space_equip",
    ConVarServerChoice = "2",
    HoverText = "Press spacebar while falling to open a parachute." .. "\n\n" ..
        "To close the parachute, press the walk key (alt by default)."
} )

table.insert( CFC_Parachute.MenuToggleButtons, {
    TextOff = "Double Tap for Space-Equip (Disabled)",
    TextOn = "Double Tap for Space-Equip (Enabled)",
    ConVar = "cfc_parachute_space_equip_double",
    ConVarServerChoice = "2",
    HoverText = "Changes space-equip activation from a single press to a double tap."
} )

table.insert( CFC_Parachute.MenuToggleButtons, {
    TextOff = "Advanced Quick Close (Disabled)",
    TextOn = "Advanced Quick Close (Enabled)",
    ConVar = "cfc_parachute_quick_close_advanced",
    ConVarServerChoice = "2",
    HoverText = "Changes the key combo for closing parachutes from walk to crouch + walk." .. "\n" ..
        "(ctrl by default)" .. "\n\n" ..
        "The keys must be pressed within quick succession of each other."
} )


local function updateMenuButton( button )
    if not button then return end

    button:SetText( button.cfcParachuteIntendedText() )

    local tooltip = button.cfcParachuteTooltip
    if not tooltip then return end

    tooltip:SetText( button.cfcParachuteIntendedHoverText() )
end

--[[
    - Returns matName, matPath for the given design index.
    - Generates a copy of the base material as an UnlitGeneric version, caching it for future use.
    - Only for use with ContentIcons, not entities.
--]]
local function getDesignPreviewMaterial( ind )
    local matName = CFC_Parachute.DesignMaterialNames[ind]
    local unlitMatPath = designPreviewMaterialPaths[ind]

    if unlitMatPath then
        return matName, unlitMatPath
    end

    local originalMatPath = CFC_Parachute.DesignMaterialPrefix .. matName
    local originalMat = Material( originalMatPath )
    local tex = originalMat:GetTexture( "$basetexture" )

    -- Material likely doesn't exist on the client. Not good, but not fatal.
    if not tex then
        return matName, originalMatPath
    end

    local unlitMat = CreateMaterial( originalMatPath .. "_unlit", "UnlitGeneric", {
        ["$basetexture"] = tex:GetName(),

        -- Some materials do/don't have these values. The following getters return nil when absent, and setting as nil is a no-op.
        ["Proxies"] = CFC_Parachute.DesignMaterialProxyInfo[matName], -- glua-created material proxies can only be set inside of CreateMaterial(), never after.
    } )
    unlitMat:SetVector( "$color2", originalMat:GetVector( "$color2" ) ) -- The simple colored designs all use this with the same base texture. Assigned here due to vmt/glua formatting differences.

    unlitMatPath = "!" .. unlitMat:GetName()
    designPreviewMaterialPaths[ind] = unlitMatPath

    return matName, unlitMatPath
end


function CFC_Parachute.CreateDesignPreview( x, y, ind, panel )
    local icon = vgui.Create( "ContentIcon", panel )
    local matName, matPath = getDesignPreviewMaterial( ind )

    icon:SetPos( x, y )
    icon:SetName( matName )
    icon:SetMaterial( matPath )

    icon.designInd = ind

    icon.DoClick = function()
        RunConsoleCommand( "cfc_parachute_design", ind )
    end

    local _Paint = icon.Paint
    icon.Paint = function( _, w, h )
        render.SuppressEngineLighting( true )
        _Paint( icon, w, h )
        render.SuppressEngineLighting( false )
    end

    return icon
end

function CFC_Parachute.PaintButton( panel ) -- Mimics appearance from CFC Loadouts for consistency
    panel:SetTextColor( BUTTON_TEXT_COLOR )

    panel.Paint = function( self, w, h )
        draw.RoundedBox( 0, 0, 0, w, h, BUTTON_OUTLINE_COLOR )

        if self:IsDown() then
            draw.RoundedBox( 0, 1, 1, w - 2, h - 2, BUTTON_PRESSED_COLOR )
        elseif self:IsHovered() then
            draw.RoundedBox( 0, 1, 1, w - 2, h - 2, BUTTON_HOVERED_COLOR )
        elseif panel.cfcParachuteIsOn and not panel.cfcParachuteIsOn() then
            draw.RoundedBox( 0, 1, 1, w - 2, h - 2, BUTTON_OFF_COLOR )
        else
            draw.RoundedBox( 0, 1, 1, w - 2, h - 2, BUTTON_COLOR )
        end
    end
end

function CFC_Parachute.PaintButtonHover( panel )
    panel:SetTextColor( BUTTON_TEXT_HOVERED_COLOR )

    panel.Paint = function( _, w, h )
        draw.RoundedBox( 0, 0, 0, w, h, TOOLTIP_OUTLINE_COLOR )
        draw.RoundedBox( 0, 1, 1, w - 2, h - 2, TOOLTIP_COLOR )
    end
end

function CFC_Parachute.CreateTooltip( panel, button )
    button:SetMouseInputEnabled( true )

    local tooltip = vgui.Create( "DLabel", panel )
    local tX, tY = panel:LocalCursorPos()
    local hoverText = button.cfcParachuteIntendedHoverText()
    local hoverState = button:IsHovered()
    local clamp = math.Clamp

    tooltip:SetText( hoverText )
    tooltip:SetPos( tX, tY )

    local pW, pH = panel:GetSize()
    local tW, tH = tooltip:GetTextSize()
    local textMargin = 10
    local panelMargin = 5
    local cursorOffsetX = -20
    local cursorOffsetY = 25

    tooltip:SetSize( tW + textMargin, tH + textMargin )
    tooltip:SetTextInset( textMargin / 2, 0 )
    CFC_Parachute.PaintButtonHover( tooltip )
    button.cfcParachuteTooltip = tooltip

    local xMax = pW - ( tW + textMargin + panelMargin )
    local yMax = pH - ( tH + textMargin + panelMargin )

    function button:Think()
        local isHovered = button:IsHovered()

        if isHovered then
            local x, y = panel:LocalCursorPos()

            x = clamp( x + cursorOffsetX, panelMargin, xMax )
            y = clamp( y + cursorOffsetY, panelMargin, yMax )

            tooltip:SetPos( x, y )
        end

        if hoverState ~= isHovered then
            hoverState = isHovered

            if hoverState then
                tooltip:MoveToFront()
                tooltip:Show()
            else
                tooltip:Hide()
            end
        end
    end
end

function CFC_Parachute.CreateToggleButton( x, y, ind, panel, w, h )
    local button = vgui.Create( "DButton", panel )
    local buttonData = CFC_Parachute.MenuToggleButtons[ind]

    local convarName = buttonData.ConVar
    local convar = convarName and GetConVar( convarName )
    local offVal = buttonData.ConVarOff or "0"
    local onVal = buttonData.ConVarOn or "1"
    local svVal = buttonData.ConVarServerChoice
    local svConvar = convarName and svVal and GetConVar( convarName .. "_sv" )
    local offText = buttonData.TextOff
    local onText = buttonData.TextOn
    local hoverText = buttonData.HoverText or ( convar and convar:GetHelpText() )
    local hideState = buttonData.HideState

    button.cfcParachuteIsOn = buttonData.IsOn or function()
        if not convar then return true end

        local curVal = convar:GetString()

        return curVal == onVal or ( curVal == svVal and svConvar:GetString() == onVal )
    end

    button.cfcParachuteIntendedText = function()
        return button.cfcParachuteIsOn() and onText or offText
    end

    button.cfcParachuteIntendedHoverText = function()
        if hideState then return hoverText end

        local text = hoverText .. "\n\n" .. "Currently "

        return text .. ( button.cfcParachuteIsOn() and "enabled" or "disabled" )
    end

    button:SetText( button.cfcParachuteIntendedText() )
    button:SetPos( x, y )
    button:SetSize( w, h )
    CFC_Parachute.PaintButton( button )

    button.DoClick = buttonData.OnClick or function()
        if not convarName then return end

        local newVal = button.cfcParachuteIsOn() and offVal or onVal

        RunConsoleCommand( convarName, newVal )
    end

    if hoverText then
        CFC_Parachute.CreateTooltip( panel, button )
    end

    buttonData.DButton = button

    return button
end

function CFC_Parachute.OpenDesignMenu()
    local window = CFC_Parachute.DesignWindow

    if window then
        window:Show()
        window:MakePopup()

        for _, data in ipairs( CFC_Parachute.MenuToggleButtons ) do
            local convarName = data.ConVar
            local serverChoice = data.ConVarServerChoice

            if convarName and serverChoice and GetConVar( convarName ):GetString() == serverChoice then
                updateMenuButton( data.DButton )
            end
        end

        return
    end

    local windowWidth = 800
    local windowHeight = 600
    local menuBarHeight = 25

    window = vgui.Create( "DFrame" )
    window:SetSize( windowWidth, windowHeight )
    window:Center()
    window:SetTitle( "CFC Parachute Config" )
    window:SetDeleteOnClose( false )
    window:MakePopup()
    window:SetDeleteOnClose()

    CFC_Parachute.DesignWindow = window

    scrollPanel = vgui.Create( "DScrollPanel", window )
    scrollPanel:SetPos( 0, menuBarHeight )
    scrollPanel:SetSize( windowWidth, windowHeight - menuBarHeight )

    window.Paint = function( _, w, h )
        draw.RoundedBox( 8, 0, 0, w, h, MENU_COLOR )
        draw.RoundedBox( 8, 0, 0, w, menuBarHeight, MENU_BAR_COLOR )
    end

    -- Toggle button setup
    local x = 0
    local y = 0
    local offsetX = 5
    local offsetY = 10
    local buttonWidth = 190
    local buttonHeight = 20
    local buttonGapX = 5
    local buttonGapY = 5

    for i = 1, #CFC_Parachute.MenuToggleButtons do
        if ( x + 1 ) * ( buttonWidth + buttonGapX ) > windowWidth then
            x = 0
            y = y + 1
        end

        CFC_Parachute.CreateToggleButton(
            x * ( buttonWidth + buttonGapX ) + offsetX,
            y * ( buttonHeight + buttonGapY ) + offsetY,
            i, scrollPanel, buttonWidth, buttonHeight
        )

        x = x + 1
    end

    -- Design button setup
    offsetX = 0

    if x > 0 then
        y = y + 1

        offsetY = offsetY + y * ( buttonHeight + buttonGapY )
    end

    x = 0
    y = 0
    buttonWidth = 120
    buttonHeight = 120

    for i = 1, CFC_Parachute.DesignMaterialCount do
        if ( x + 1 ) * buttonWidth >= windowWidth then
            x = 0
            y = y + 1
        end

        CFC_Parachute.CreateDesignPreview(
            x * ( buttonWidth + buttonGapX ) + offsetX,
            y * ( buttonHeight + buttonGapY ) + offsetY,
            i, scrollPanel
        )

        x = x + 1
    end
end


cvars.AddChangeCallback( "cfc_parachute_design", function()
    -- Use a timer to ensure USERINFO is updated before the server tries to read it, and reduce net messages if someone spams the design buttons
    timer.Create( "CFC_Parachute_SelectDesign", 0.25, 1, function()
        net.Start( "CFC_Parachute_SelectDesign" )
        net.SendToServer()
    end )
end )


hook.Add( "InitPostEntity", "CFC_Parachute_FinalMenuPrep", function()
    hook.Run( "CFC_Parachute_CheckOptionalDependencies" )

    for _, data in ipairs( CFC_Parachute.MenuToggleButtons ) do
        local convarName = data.ConVar

        if convarName then
            cvars.AddChangeCallback( convarName, function()
                updateMenuButton( data.DButton )
            end )
        end
    end
end )

hook.Add( "AddToolMenuCategories", "CFC_Parachute_AddToolMenuCategories", function()
    spawnmenu.AddToolCategory( "Options", "CFC", "#CFC" )
end )

hook.Add( "PopulateToolMenu", "CFC_Parachute_PopulateToolMenu", function()
    spawnmenu.AddToolMenuOption( "Options", "CFC", "cfc_parachutes", "#Parachutes", "", "", function( panel )
        local btn = panel:Button( "Parachute Settings" )

        function btn:DoClick()
            CFC_Parachute.OpenDesignMenu()
            RunConsoleCommand( "-menu" )
        end
    end )
end )


net.Receive( "CFC_Parachute_DefineChuteDir", function()
    local chute = net.ReadEntity()
    local chuteDirRel = net.ReadVector()

    if not chute.SetChuteDirection then return end -- Somehow the function sometimes becomes nil while the parachute is still valid

    chute:SetChuteDirection( chuteDirRel )
end )
