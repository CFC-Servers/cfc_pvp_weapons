CFC_Parachute = CFC_Parachute or {}

CFC_Parachute.DesignMaterials = false
CFC_Parachute.DesignMaterialNames = false
CFC_Parachute.DesignMaterialCount = false
CFC_Parachute.DesignWindow = false

CFC_Parachute.MenuToggleButtons = CFC_Parachute.MenuToggleButtons or {}
--[[ Contains tables with the following syntax to represent toggle buttons which will get added to the top of the design menu:
{
    TextOff = STRING, -- Text displayed when the button's value is 'off'
    TextOn = STRING, -- Text displayed when the button's value is 'on'
    ConVar = STRING, -- ConVar to be toggled (optional if OnClick and IsOn are defined)
    ConVarOff = STRING, -- Off value of ConVar (optional, default "0")
    ConVarOn = STRING, -- On value of ConVar (optional, default "1")
    ConVarServerChoice, = STRING, -- Value which tells the client to use whatever value is used by the server in a convar of the same name with _sv appended (optional, does not exist by default)
    OnClick = FUNCTION, -- Function to call when the button is pressed, overrides default functionality (optional)
    IsOn = FUNCTION, -- Returns true/false for if the button is on/off (optional if ConVar is defined)
    DButton = DBUTTON -- Autogenerated DButton object, used internally
}
--]]

local DESIGN_MATERIALS
local DESIGN_MATERIAL_NAMES
local DESIGN_MATERIAL_COUNT

local DESIGN_CHOICE = CreateConVar( "cfc_parachute_design", 1, { FCVAR_ARCHIVE, FCVAR_USERINFO, FCVAR_SERVER_CAN_EXECUTE, FCVAR_NEVER_AS_STRING }, "Your selected parachute design.", 1, 50000 )

local ANG_ZERO = Angle( 0, 0, 0 )
local ANG_GRAB_RIGHT_UPPERARM = Angle( 127.3, 331.3, 368.5 )
local ANG_GRAB_RIGHT_FOREARM = Angle( -6.8, 41.4, 57.5 )
local ANG_GRAB_RIGHT_HAND = Angle( 0, 26.7, 25.4 )
local ANG_GRAB_LEFT_UPPERARM = Angle( -72.1, -166, 127.3 )
local ANG_GRAB_LEFT_FOREARM = Angle( -11, 7.2, 26.5 )
local ANG_GRAB_LEFT_HAND = Angle( 0, 8.7, 0 )

local LFS_EXISTS
local LFS_AUTO_CHUTE
local LFS_EJECT_LAUNCH

local function trySetupLFS()
    if not LFS_EXISTS then return end

    CreateConVar( "cfc_parachute_lfs_eject_height", 500, { FCVAR_REPLICATED, FCVAR_ARCHIVE }, "The minimum height above the ground a player must be to auto-equip a parachute when ejecting from an LFS.", 0, 50000 )
    CreateConVar( "cfc_parachute_lfs_eject_launch_force", 1100, { FCVAR_REPLICATED, FCVAR_ARCHIVE }, "The upwards force applied to players when they launch out of an LFS plane.", 0, 50000 )
    CreateConVar( "cfc_parachute_lfs_eject_launch_bias", 25, { FCVAR_REPLICATED, FCVAR_ARCHIVE }, "How many degrees the LFS eject launch should course-correct the player's trajectory to send them straight up, for if their plane is tilted.", 0, 90 )
    CreateConVar( "cfc_parachute_lfs_eject_stability_time", 5, { FCVAR_REPLICATED, FCVAR_ARCHIVE }, "How many seconds a player is immune to parachute instability when they launch out of an LFS plane.", 0, 50000 )
    CreateConVar( "cfc_parachute_lfs_enter_radius", 800, { FCVAR_REPLICATED, FCVAR_ARCHIVE }, "How close a player must be to enter an LFS if they are in a parachute and regular use detection fails. Makes it easier to get inside of an LFS for performing a Rendezook.", 0, 50000 )

    LFS_AUTO_CHUTE = CreateClientConVar( "cfc_parachute_lfs_auto_equip", 2, true, true, "Whether or not to auto-equip a parachute when ejecting from an LFS plane in the air.", 0, 2 )
    LFS_EJECT_LAUNCH = CreateClientConVar( "cfc_parachute_lfs_eject_launch", 2, true, true, "Whether or not to launch up high when ejecting from an LFS plane in the air. Useful for pulling off a Rendezook.", 0, 2 )

    LFS_AUTO_CHUTE_SV = CreateConVar( "cfc_parachute_lfs_auto_equip_sv", 1, { FCVAR_ARCHIVE, FCVAR_REPLICATED }, "Whether or not to auto-equip a parachute when ejecting from an LFS plane in the air. Defines the default value for players.", 0, 1 )
    LFS_EJECT_LAUNCH_SV = CreateConVar( "cfc_parachute_lfs_eject_launch_sv", 1, { FCVAR_ARCHIVE, FCVAR_REPLICATED }, "Whether or not to launch up high when ejecting from an LFS plane in the air. Useful for pulling off a Rendezook. Defines the default value for players.", 0, 1 )

    table.insert( CFC_Parachute.MenuToggleButtons, {
        TextOff = "Enable LFS Auto-Parachute",
        TextOn = "Disable LFS Auto-Parachute",
        ConVar = "cfc_parachute_lfs_auto_equip",
        ConVarServerChoice = "2"
    } )

    table.insert( CFC_Parachute.MenuToggleButtons, {
        TextOff = "Enable LFS Eject-Launch",
        TextOn = "Disable LFS Eject-Launch",
        ConVar = "cfc_parachute_lfs_eject_launch",
        ConVarServerChoice = "2"
    } )
end

function CFC_Parachute.CreateDesignPreview( x, y, ind, panel )
    local icon = vgui.Create( "ContentIcon", panel )
    icon:SetPos( x, y )
    icon:SetName( DESIGN_MATERIAL_NAMES[ind] )
    icon:SetMaterial( DESIGN_MATERIALS[ind] )

    icon.designInd = ind
    
    icon.DoClick = function()
        LocalPlayer():ConCommand( "cfc_parachute_design " .. ind )
    end

    return icon
end

function CFC_Parachute.PaintButton( panel ) -- Mimics appearance from CFC Loadouts for consistency
    panel:SetTextColor( Color( 255, 255, 255 ) )

    panel.Paint = function( self, w, h )
        draw.RoundedBox( 0, 0, 0, w, h, Color( 255, 255, 255, 255 ) )

        if self:IsDown() then
            draw.RoundedBox( 0, 1, 1, w - 2, h - 2, Color( 83, 227, 251, 255 ) )
        elseif self:IsHovered() then
            draw.RoundedBox( 0, 1, 1, w - 2, h - 2, Color( 35, 42, 69, 255 ) )
        else
            draw.RoundedBox( 0, 1, 1, w - 2, h - 2, Color( 42, 47, 74, 255 ) )
        end
    end
end

function CFC_Parachute.CreateToggleButton( x, y, ind, panel, w, h )
    local button = vgui.Create( "DButton", panel )
    local buttonData = CFC_Parachute.MenuToggleButtons[ind]
    
    local convarName = buttonData.ConVar
    local convar = convarName and GetConVar( convarName )
    local offVal = buttonData.ConVarOff or "0"
    local onVal = buttonData.ConVarOn or "1"
    local svVal = buttonData.ConVarServerChoice
    local offText = buttonData.TextOff or "Enable [UNDEFINED]"
    local onText = buttonData.TextOn or "Disable [UNDEFINED]"

    button.cfcParachuteIsOn = buttonData.IsOn or function()
        local curVal = convar:GetString()

        return curVal == onVal or ( curVal == svVal and GetConVar( convarName .. "_sv" ):GetString() == onVal )
    end

    button.cfcParachuteIntendedText = function()
        return button.cfcParachuteIsOn() and onText or offText
    end

    button:SetText( button.cfcParachuteIntendedText() )
    button:SetPos( x, y )
    button:SetSize( w or 200, h or 20 )
    CFC_Parachute.PaintButton( button )

    button.DoClick = buttonData.OnClick or function()
        local newVal = button.cfcParachuteIsOn() and offVal or onVal

        LocalPlayer():ConCommand( convarName .. " " .. newVal )
    end

    buttonData.DButton = button

    return button
end

function CFC_Parachute.OpenDesignMenu()
    local window = CFC_Parachute.DesignWindow

    if window then
        window:Show()
        window:MakePopup()

        for i, data in ipairs( CFC_Parachute.MenuToggleButtons ) do
            local convarName = data.ConVar
            local serverChoice = data.ConVarServerChoice
    
            if convarName and serverChoice and GetConVar( convarName ):GetString() == serverChoice then
                local button = data.DButton

                if not button then return end

                button:SetText( button.cfcParachuteIntendedText() )
            end
        end

        return
    end

    local windowWidth = 800
    local windowHeight = 600

    window = vgui.Create( "DFrame" )
    window:SetSize( windowWidth, windowHeight )
    window:Center()
    window:SetTitle( "CFC Parachute Config" )
    window:SetDeleteOnClose( false )
    window:MakePopup()
    window:SetDeleteOnClose()

    CFC_Parachute.DesignWindow = window

    scrollPanel = vgui.Create( "DScrollPanel", window )
    scrollPanel:SetPos( 0, 20 )
    scrollPanel:SetSize( windowWidth, windowHeight )

    window.Paint = function( _, w, h )
        draw.RoundedBox( 8, 0, 0, w, h, Color( 36, 41, 67, 255 ) )
        draw.RoundedBox( 8, 0, 0, w, 25, Color( 42, 47, 74, 255 ) )
    end

    -- Toggle button setup
    local x = 0
    local y = 0
    local offsetX = 5
    local offsetY = 10
    local buttonWidth = 200
    local buttonHeight = 20
    local buttonGapX = 5
    local buttonGapY = 5

    for i = 1, #CFC_Parachute.MenuToggleButtons do
        if ( x + 1 ) * buttonWidth >= windowWidth then
            x = 0
            y = y + 1
        end

        CFC_Parachute.CreateToggleButton(
            x * ( buttonWidth + buttonGapX ) + offsetX,
            y * ( buttonHeight + buttonGapY ) + offsetY,
            i, scrollPanel, buttonWidth, buttonHeight
        )

        x = x + 1
    end

    -- Design button setup
    offsetX = 0

    if x > 0 then
        y = y > 0 and y or 1

        offsetY = offsetY + y * ( buttonHeight + buttonGapY )
    end

    x = 0
    y = 0
    buttonWidth = 120
    buttonHeight = 120

    for i = 1, CFC_Parachute.DesignMaterialCount do
        if ( x + 1 ) * buttonWidth >= windowWidth then
            x = 0
            y = y + 1
        end

        CFC_Parachute.CreateDesignPreview(
            x * ( buttonWidth + buttonGapX ) + offsetX,
            y * ( buttonHeight + buttonGapY ) + offsetY,
            i, scrollPanel
        )

        x = x + 1
    end
end

cvars.AddChangeCallback( "cfc_parachute_design", function( _, old, new )
    net.Start( "CFC_Parachute_SelectDesign" )
    net.WriteInt( math.floor( old ), 17 )
    net.WriteInt( math.floor( new ), 17 )
    net.SendToServer()
end )

hook.Add( "InitPostEntity", "CFC_Parachute_CheckOptionalDependencies", function()
    LFS_EXISTS = simfphys and simfphys.LFS and true

    trySetupLFS()

    for i, data in ipairs( CFC_Parachute.MenuToggleButtons ) do
        local convarName = data.ConVar

        if convarName then
            cvars.AddChangeCallback( convarName, function( _, old, new )
                local button = data.DButton

                if not button then return end
                
                button:SetText( button.cfcParachuteIntendedText() )
            end )
        end
    end
end )

net.Receive( "CFC_Parachute_DefineChuteDir", function()
    local chute = net.ReadEntity()
    local chuteDir = net.ReadVector()

    if not chute.SetChuteDirection then return end -- Somehow the function sometimes becomes nil while the parachute is still valid

    chute:SetChuteDirection( chuteDir )
end )

net.Receive( "CFC_Parachute_DefineChuteUnfurlStatus", function()
    local chute = net.ReadEntity()
    local unfurlState = net.ReadBool()

    if not chute.SetUnfurlStatus then return end -- Somehow the function sometimes becomes nil while the parachute is still valid

    chute:SetUnfurlStatus( unfurlState )
end )

net.Receive( "CFC_Parachute_DefineDesigns", function()
    DESIGN_MATERIALS = net.ReadTable()
    DESIGN_MATERIAL_NAMES = net.ReadTable()
    DESIGN_MATERIAL_COUNT = net.ReadInt( 17 )

    CFC_Parachute.DesignMaterials = DESIGN_MATERIALS
    CFC_Parachute.DesignMaterialNames = DESIGN_MATERIAL_NAMES
    CFC_Parachute.DesignMaterialCount = DESIGN_MATERIAL_COUNT
end )

net.Receive( "CFC_Parachute_SelectDesign", function()
    net.Start( "CFC_Parachute_SelectDesign" )
    net.WriteInt( 1, 17 )
    net.WriteInt( DESIGN_CHOICE:GetInt(), 17 )
    net.SendToServer()
end )

net.Receive( "CFC_Parachute_GrabChuteStraps", function()
    local ply = net.ReadEntity()
    local state = net.ReadBool()

    if not IsValid( ply ) then return end

    ply:SetIK( not state )

    if state then
        ply:AnimRestartGesture( GESTURE_SLOT_CUSTOM, ACT_GMOD_NOCLIP_LAYER, false )
        ply:AnimRestartGesture( GESTURE_SLOT_JUMP, ACT_HL2MP_IDLE_PASSIVE, false )
    else
        ply:AnimResetGestureSlot( GESTURE_SLOT_CUSTOM )
        ply:AnimResetGestureSlot( GESTURE_SLOT_JUMP )
    end

    local rightUpperarm = ply:LookupBone( "ValveBiped.Bip01_R_Upperarm" )
    local rightForearm = ply:LookupBone( "ValveBiped.Bip01_R_Forearm" )
    local rightHand = ply:LookupBone( "ValveBiped.Bip01_R_Hand" )
    local leftUpperarm = ply:LookupBone( "ValveBiped.Bip01_L_Upperarm" )
    local leftForearm = ply:LookupBone( "ValveBiped.Bip01_L_Forearm" )
    local leftHand = ply:LookupBone( "ValveBiped.Bip01_L_Hand" )

    if not rightUpperarm or not rightForearm or not rightHand or not leftUpperarm or not leftForearm or not leftHand then return end

    if state then
        ply:ManipulateBoneAngles( rightUpperarm, ANG_GRAB_RIGHT_UPPERARM )
        ply:ManipulateBoneAngles( rightForearm, ANG_GRAB_RIGHT_FOREARM )
        ply:ManipulateBoneAngles( rightHand, ANG_GRAB_RIGHT_HAND )
        ply:ManipulateBoneAngles( leftUpperarm, ANG_GRAB_LEFT_UPPERARM )
        ply:ManipulateBoneAngles( leftForearm, ANG_GRAB_LEFT_FOREARM )
        ply:ManipulateBoneAngles( leftHand, ANG_GRAB_LEFT_HAND )
    else
        ply:ManipulateBoneAngles( rightUpperarm, ANG_ZERO )
        ply:ManipulateBoneAngles( rightForearm, ANG_ZERO )
        ply:ManipulateBoneAngles( rightHand, ANG_ZERO )
        ply:ManipulateBoneAngles( leftUpperarm, ANG_ZERO )
        ply:ManipulateBoneAngles( leftForearm, ANG_ZERO )
        ply:ManipulateBoneAngles( leftHand, ANG_ZERO )
    end
end )
